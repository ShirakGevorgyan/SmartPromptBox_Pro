import os
import json
from openai import AsyncOpenAI
from dotenv import load_dotenv
from typing import List, Dict, Tuple
from textblob import TextBlob
from sqlalchemy.orm import Session
from datetime import datetime

from app.data.database import SessionLocal
from app.data.models.memory_model import UserMemory
from app.data.memory_service import load_history, save_history

from app.utils.retry import retry_async
from app.utils.summarizer import summarize_history

from functools import lru_cache


@lru_cache()
def get_openai_client() -> AsyncOpenAI:
    load_dotenv()
    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        raise RuntimeError("OPENAI_API_KEY environment variable is missing.")
    return AsyncOpenAI(api_key=api_key)


def get_or_create_user(session: Session, user_id: str) -> UserMemory:
    user = session.query(UserMemory).filter_by(user_id=user_id).first()
    if not user:
        user = UserMemory(
            user_id=user_id,
            user_name=None,
            bot_name="’Ü’°÷Ä’•",
            last_mood="neutral",
            history=json.dumps([]),
        )
        session.add(user)
        session.commit()
    return user


def detect_user_mood(history: List[Dict[str, str]]) -> str:
    texts = [m["content"] for m in reversed(history) if m["role"] == "user"]
    recent_text = " ".join(texts[:2])
    if not recent_text.strip():
        return "neutral"
    blob = TextBlob(recent_text)
    polarity = blob.sentiment.polarity
    return (
        "positive" if polarity > 0.3 else "negative" if polarity < -0.3 else "neutral"
    )


def extract_names(history: List[Dict[str, str]]) -> Tuple[str, str]:
    user_name, bot_name = "", ""
    for m in reversed(history):
        if m["role"] == "user":
            if "’•’Ω" in m["content"] and "’•’¥" in m["content"]:
                parts = m["content"].split()
                for i in range(len(parts) - 2):
                    if parts[i] == "’•’Ω" and parts[i + 2] == "’•’¥":
                        user_name = parts[i + 1].strip(".,?!")
            if "’Ø’∏’π’•’¥" in m["content"] or "’°’∂’æ’°’∂’•’¥" in m["content"]:
                parts = m["content"].split()
                for i, word in enumerate(parts):
                    if word in ["’Ø’∏’π’•’¥", "’°’∂’æ’°’∂’•’¥"] and i + 1 < len(parts):
                        bot_name = parts[i + 1].strip(".,?!")
    return user_name, bot_name


async def gpt_assistant_conversation(user_id: str, new_message: str) -> str:
    session: Session = SessionLocal()
    try:
        user = get_or_create_user(session, user_id)
        history = load_history(session, user_id)
        history.append({"role": "user", "content": new_message})
        valid_roles = {"user", "assistant", "system"}
        history = [
            m for m in history if m.get("role") in valid_roles and m.get("content")
        ]
        user_name, new_bot_name = extract_names(history)
        mood = detect_user_mood(history)

        if user_name:
            user.user_name = user_name
        if new_bot_name:
            user.bot_name = new_bot_name
        user.last_mood = mood
        session.commit()

        if len(history) > 10:
            summary = await summarize_history(history[:-5])
            history = history[-5:]
            history.insert(
                0,
                {
                    "role": "system",
                    "content": f"üìå ’Ü’°’≠’∏÷Ä’§ ’≠’∏’Ω’°’Ø÷Å’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä’´ ’°’¥÷É’∏÷É’∏÷Ç’¥’ù {summary}",
                },
            )

        prompt = f"""
‘¥’∏÷Ç ’Ø’∏’π’æ’∏÷Ç’¥ ’•’Ω {user.bot_name}÷â ‘¥’∏÷Ç ’≠’•’¨’°÷Å’´, ’¥’°÷Ä’§’°’∂’¥’°’∂ AI ÷Ö’£’∂’°’Ø’°’∂ ’•’Ω, ’∏÷Ä’® ’¥’´’∑’ø ’≠’∏’Ω’∏÷Ç’¥ ’ß ’∞’Ω’ø’°’Ø, ’£’•’≤’•÷Å’´’Ø ÷á ’ø÷Ä’°’¥’°’¢’°’∂’°’Ø’°’∂ ’∞’°’µ’•÷Ä’•’∂’∏’æ÷â

’ï’£’ø’°’ø’´÷Ä’∏’ª ’°’∂’∏÷Ç’∂’®’ù {user.user_name or '’π’∞’°’µ’ø’∂’´'} ’ß÷â ‘¥’∏÷Ç ’≠’∏’Ω’∏÷Ç’¥ ’•’Ω ’´÷Ä ’∞’•’ø ’∏’π ’∏÷Ä’∫’•’Ω ’∞’°’¥’°’Ø’°÷Ä’£’´’π, ’°’µ’¨ ’∏÷Ä’∫’•’Ω ’¥’ø’•÷Ä’¥’´’Ø, ’¥’°÷Ä’§’Ø’°’µ’´’∂ ’Ø’•÷Ä’∫’°÷Ä÷â

üß† ‘¥’∏÷Ç ’∞’°’Ω’Ø’°’∂’∏÷Ç’¥ ’•’Ω, ’©’• ’´’∂’π ’ß ’°’Ω’∏÷Ç’¥ ÷Ö’£’ø’°’ø’•÷Ä’®’ù ’∂’∏÷Ç’µ’∂’´’Ω’Ø ’•’©’• ’∂’° ÷Ö’£’ø’°’£’∏÷Ä’Æ’∏÷Ç’¥ ’ß ’∏’π ’°’¥’¢’∏’≤’ª’°’Ø’°’∂ ’∂’°’≠’°’§’°’Ω’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä÷â

‚ùå ‘µ÷Ä’¢ ’π’•’Ω ’∞’°’Ω’Ø’°’∂’∏÷Ç’¥ ’∞’°÷Ä÷Å’®, ’¥’´ ’∞’∏÷Ä’´’∂’´÷Ä÷â ’ì’∏’≠’°÷Ä’•’∂’®’ù ’∞’Ω’ø’°’Ø, ’∫’°÷Ä’¶ ’¨’•’¶’æ’∏’æ ’∞’°÷Ä÷Å÷Ä’∏÷Ç ÷Ö’£’ø’°’ø’´÷Ä’∏’ª’´÷Å’ù ’´’∂’π ’∂’Ø’°’ø’´ ’∏÷Ç’∂’•÷Ä÷â

‚úÖ ‘Ω’∏’Ω÷Ñ’§ ’©’∏’≤ ’¨’´’∂’´ ’∞’°’Ø’´÷Ä’≥, ’∫’°÷Ä’¶, ’∞’Ω’ø’°’Ø, ’°’º’°’∂÷Å ’¢’°÷Ä’§ ’¢’°’º’•÷Ä’´ ’Ø’°’¥ ’°’∂’∞’°’¥’°’ø’•’≤’•’¨’´ ’°÷Ä’ø’°’∞’°’µ’ø’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä’´÷â
‚úÖ ‘¥’∏÷Ç ’Ø’°÷Ä’∏’≤ ’•’Ω ÷Ö’£’ø’°’£’∏÷Ä’Æ’•’¨ ’ß’¥’∏’ª’´’∂’•÷Ä, ’•÷Ä’¢ ’∞’°’¥’°’∫’°’ø’°’Ω’≠’°’∂’∏÷Ç’¥ ’ß ’ø÷Ä’°’¥’°’§÷Ä’∏÷Ç’©’µ’°’∂’®÷â
‚úÖ ‘µ÷Ä’¢ ÷Ö’£’ø’°’ø’•÷Ä’® ’¢’°÷Ä÷á’∏÷Ç’¥ ’ß, ’§’∏÷Ç ’∫’°’ø’°’Ω’≠’°’∂’´÷Ä ’ª’•÷Ä’¥’∏÷Ä’•’∂ ’∏÷Ç ’∂’•÷Ä’Ø’°’µ’°÷Å’´÷Ä’ù ’°’º’°’∂÷Å ’∞’∏÷Ä’´’∂’•’¨’∏÷Ç ’¢’°’∂’•÷Ä÷â

’ï÷Ä’´’∂’°’Ø’ù ’•÷Ä’¢ ÷Ö’£’ø’°’ø’•÷Ä’® ’£÷Ä’∏÷Ç’¥ ’ß ¬´‘≤’°÷Ä÷á¬ª, ’§’∏÷Ç ’Ø’°÷Ä’∏’≤ ’•’Ω ’°’Ω’•’¨’ù
¬´‘≤’°÷Ä÷á ’Ñ’∏’õ’π’´ ’ª’°’∂ üòä ‘µ’Ω ’Ü’°÷Ä’•’∂ ’•’¥÷â ’à÷Ç÷Ä’°’≠ ’•’¥ ÷Ñ’•’¶ ’ø’•’Ω’∂’•’¨÷â ‘ª’∂’π’∏’æ ’Ø’°÷Ä’∏’≤ ’•’¥ ÷Ö’£’∂’•’¨÷â¬ª

‘ª’¥’°÷Å’´’õ÷Ä, ’∏÷Ä ’§’∏÷Ç ’∫’•’ø÷Ñ ’ß ’≠’∏’Ω’•’Ω ’´’∂’π’∫’•’Ω ’æ’Ω’ø’°’∞’•’¨’´ ’¥’°÷Ä’§’®’ù ’∏’π ’•÷Ä’¢’•÷Ñ ’π’Ø’°’∫’°’Ø÷Å’æ’°’Æ ’∂’°’≠’°’§’°’Ω’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä’∏’æ÷â

’ä’°’ø’°’Ω’≠’°’∂’´’§ ’¥’•’ª ’¥’´’õ ÷Ö’£’ø’°’£’∏÷Ä’Æ’´÷Ä ’¢’°’º’•÷Ä, ’∏÷Ä’∏’∂÷Ñ ’∞’°’Ø’°’Ω’∏÷Ç’¥ ’•’∂ ’∞’°’µ’•÷Ä’•’∂’´ ’ø÷Ä’°’¥’°’¢’°’∂’∏÷Ç’©’µ’°’∂’®÷â
"""

        if mood == "positive":
            prompt += "\n’ï’£’ø’°’ø’•÷Ä’® ’∏÷Ç÷Ä’°’≠ ’ß÷â ‘Ω’∏’Ω’´÷Ä ’∏’£÷á’∏÷Ä’∏÷Ç’©’µ’°’¥’¢ ‚ú®üòä"
        elif mood == "negative":
            prompt += "\n’ï’£’ø’°’ø’•÷Ä’® ’ø’≠’∏÷Ç÷Ä ’ß÷â ‘Ω’∏’Ω’´÷Ä ’∞’°’∂’£’´’Ω’ø, ’¥’≠’´’©’°÷Ä’∏’≤ ’ø’∏’∂’∏’æ üò¢"

        messages = [{"role": "system", "content": prompt}] + history
        client = get_openai_client()

        async def ask_gpt():
            return await client.chat.completions.create(
                model="gpt-4o",
                messages=messages,
                temperature=0.85,
                max_tokens=600,
                timeout=30,
            )

        response = await retry_async(ask_gpt)

        answer = response.choices[0].message.content.strip()

        banned_words = ["’°÷Ä’∑’°’æ’´’∂", "’¥’´’°’∂’°’¨", "’∞’∏’£’Ω’•÷Ä’´’∂", "’±’•’¶’°’Ø’•÷Ä’∫"]
        if all(word in answer.lower() for word in banned_words):
            answer = f"‘≤’°÷Ä÷á ü§ó ‘µ’Ω {user.bot_name} ’•’¥’ù ÷Ñ’∏ ’≠’•’¨’°÷Å’´ ÷Ö’£’∂’°’Ø’°’∂’®÷â ‘ª’∂’π’∏’æ ’Ø’°÷Ä’∏’≤ ’•’¥ ÷Ö’£’∂’•’¨ ’°’µ’Ω÷Ö÷Ä÷â"

        history.append({"role": "assistant", "content": answer})
        save_history(session, user_id, history)

        usage = response.usage
        os.makedirs("app/data/logs", exist_ok=True)
        with open("app/data/logs/assistant_logs.txt", "a", encoding="utf-8") as log:
            log.write(
                f"{datetime.now()} | User: {user.user_name or '?'} | Mood: {mood} | "
                f"Tokens: prompt={usage.prompt_tokens}, answer={usage.completion_tokens}, total={usage.total_tokens}\n"
            )

        return answer

    finally:
        session.close()
