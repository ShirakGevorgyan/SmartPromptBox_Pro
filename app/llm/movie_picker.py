"""Movie suggestions via OpenAI with Armenian prompts.

Functions here:
- add_default_links_if_missing: ensure trailer/watch links are present.
- get_random_movie_llm: propose a random movie across random genres and years.
- suggest_movies_by_description_llm: one movie based on a free-text description.
- get_movie_details_by_name_llm: detailed info for a given movie title.
- get_movies_by_genre_llm: three movies for a specific genre.
- get_top_10_movies_llm: a top-10 modern cinema list.

All functions call OpenAI Chat (Armenian prompts) and post-process the output
using `replace_plot_with_refined` to rewrite the plot section in clearer Armenian.
"""

from openai import OpenAI
import os
from dotenv import load_dotenv
import random
from app.llm.text_utils import replace_plot_with_refined

load_dotenv()
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

DEFAULT_TRAILER = "https://youtube.com"
DEFAULT_WATCH = "https://www.imdb.com"


def add_default_links_if_missing(text: str) -> str:
    """Append default trailer/watch links if the response omitted them.

    Args:
        text: Raw LLM response text that should contain trailer/watch links.

    Returns:
        The original text, possibly with appended trailer and watch links.
    """
    if "โถ๏ธ ีึีฅีตีฌีฅึ" not in text:
        text += f"\nโถ๏ธ ีึีฅีตีฌีฅึี [ิดีซีฟีฅีฌ YouTube-ีธึีด]({DEFAULT_TRAILER})"
    if "๐๏ธ ิดีซีฟีฅีฌีธึ ีฐีฒีธึีด" not in text:
        text += f"\n๐๏ธ ิดีซีฟีฅีฌีธึ ีฐีฒีธึีดี [IMDB]({DEFAULT_WATCH})"
    return text


# ๐ฒ ีีกีฟีกีฐีกีฏีกีถ ึีซีฌีด
def get_random_movie_llm() -> str:
    """Return a single random movie suggestion (genres/years chosen randomly).

    Builds an Armenian prompt with randomly sampled genres and year range,
    asks OpenAI, injects default links if needed, then refines the '๐ ีีตีธึีชีฅ' section.

    Returns:
        A formatted Armenian block with title, genre, director, cast, plot, ratings, etc.
    """
    genres = [
        "ีฃีซีฟีกึีกีถีฟีกีฝีฟีซีฏีก",
        "ีคึีกีดีก",
        "ีกึีฏีกีฎีกีตีซีถ",
        "ีฏีกีฟีกีฏีฅึีฃีธึีฉีตีธึีถ",
        "ีฐีธีฃีฅีขีกีถีกีฏีกีถ ีฉึีซีฌีฌีฅึ",
        "ีฝีกึีฝีกึ",
        "ีบีกีฟีดีกีฏีกีถ",
        "ีผีธีดีกีถีฟีซีฏ",
        "ีคีฅีฟีฅีฏีฟีซีพ",
        "ีดีตีธึีฆีซึีฌ",
        "ีกีฏึีซีกีถ",
        "ึีกีถีฟีกีฆีซีก",
        "ีดีซีฝีฟีซีฏีก",
        "ีฝีบีธึีฟีกีตีซีถ",
        "ึึีฅีกีฏีกีถ",
        "ีบีกีฟีฅึีกีฆีดีกีฏีกีถ",
        "ีฏีฅีถีฝีกีฃึีกีฏีกีถ",
        "ีจีถีฟีกีถีฅีฏีกีถ",
        "ีกึึีฅีฌีตีกีถ ีดีกึีฟีกึีพีฅีฝีฟ",
        "ีพีฅีฝีฟีฅึีถ",
        "ึีกีฝีฟีกีฃึีกีฏีกีถ",
        "ีฝีธึีซีกีฌีกีฏีกีถ ีคึีกีดีก",
    ]
    selected_genres = random.sample(genres, k=random.choice([2, 3]))
    genres_str = ", ".join(selected_genres)

    start_year = random.randint(1970, 2020)
    end_year = random.randint(start_year + 1, 2023)

    prompt_intro = random.choice(
        [
            "ีกีผีกีปีกึีฏีซึ ีดีซ ึีซีฌีด, ีธึีจ ีทีกีฟีฅึีจ ีฏีพีกีตีฅีฌีฅีถ",
            "ีถีทีซึ ีฐีซีกีถีกีฌีซ ึีซีฌีดี ีจีฝีฟ ีชีกีถึีซ ึ ีฟีกึีฅีฉีพีซ",
            "ีบีกีฟีกีฐีกีฏีกีถ, ีขีกีตึ ีฐีกีถึีกีฐีกีตีฟ ึีซีฌีดีซ ีกีผีกีปีกึีฏ",
            "ึีซีฌีด, ีธึีถ ีกึีชีฅ ีคีซีฟีฅีฌ ีจีฝีฟ ึีธ ีจีถีฟึีกีฎ ีชีกีถึีฅึีซ",
        ]
    )

    prompt = f"""
ิฝีถีคึีธึีด ีฅีด {prompt_intro}ึ

ิบีกีถึีฅึีจี {genres_str}
ีีกึีฅีฉีพีฅึีซ ีดีซีปีกีฏีกีตึี {start_year} - {end_year}

ีีพีตีกีฌีจ ีฟีธึึ ีฐีฅีฟึีตีกีฌ ีฑึีกีนีกึีธีพี

๐ฅ ีีฅึีถีกีฃีซึ` ... (ีีกึีซ)
๐ญ ิบีกีถึีจี ...
๐ฌ ีีฅีชีซีฝีธึี ...
๐ญ ิดีฅึีกีฝีกีถีถีฅึี ... (ีณีทีฃึีซีฟ 5 ีฐีกีตีฟีถีซ ีคีฅึีกีฝีกีถี ีกีถีธึีถ, ีกีฆีฃีกีถีธึีถ ีฑึีกีนีกึีธีพ)
๐ ีีตีธึีชีฅี ...
๐ IMDb ีฃีถีกีฐีกีฟีกีฏีกีถี ...
โถ๏ธ ีึีฅีตีฌีฅึี [ิดีซีฟีฅีฌ YouTube-ีธึีด](...)
๐๏ธ ิดีซีฟีฅีฌีธึ ีฐีฒีธึีดี [IMDB ีฏีกีด ีกีตีฌ ีพีฝีฟีกีฐีฅีฌีซ ีกีฒีขีตีธึึ](...)
"""
    response = client.chat.completions.create(
        model="gpt-4o", messages=[{"role": "user", "content": prompt}], temperature=1.2
    )
    raw_output = response.choices[0].message.content
    text_with_links = add_default_links_if_missing(raw_output)
    return replace_plot_with_refined(text_with_links, client)


def suggest_movies_by_description_llm(description: str) -> str:
    """Suggest a movie that fits the provided free-text description.

    Args:
        description: Short Armenian description of what the user wants.

    Returns:
        A formatted Armenian block with standard fields and refined plot.
    """
    prompt = f"""
ีีฃีฟีกีฟีฅึีจ ึีกีถีฏีกีถีธึีด ีง ึีซีฌีด ีกีผีกีปีกึีฏี ีจีฝีฟ ีถีฏีกึีกีฃึีธึีฉีตีกีถโค
ยซ{description}ยป

ีีพีตีกีฌีจ ีฟีธึึ ีฐีฅีฟึีตีกีฌ ีฑึีกีนีกึีธีพี

๐ฅ ีีฅึีถีกีฃีซึ` ... (ีีกึีซ)
๐ญ ิบีกีถึีจี ...
๐ฌ ีีฅีชีซีฝีธึี ...
๐ญ ิดีฅึีกีฝีกีถีถีฅึี ... (ีณีทีฃึีซีฟ 5 ีฐีกีตีฟีถีซ ีคีฅึีกีฝีกีถี ีกีถีธึีถ, ีกีฆีฃีกีถีธึีถ ีฑึีกีนีกึีธีพ)
๐ IMDb ีฃีถีกีฐีกีฟีกีฏีกีถี ...
โถ๏ธ ีึีฅีตีฌีฅึี [ิดีซีฟีฅีฌ YouTube-ีธึีด](...)
๐๏ธ ิดีซีฟีฅีฌีธึ ีฐีฒีธึีดี [IMDB ีฏีกีด ีกีตีฌ ีพีฝีฟีกีฐีฅีฌีซ ีกีฒีขีตีธึึ](...)
"""
    response = client.chat.completions.create(
        model="gpt-4o", messages=[{"role": "user", "content": prompt}], temperature=0.9
    )
    raw_output = response.choices[0].message.content
    text_with_links = add_default_links_if_missing(raw_output)
    return replace_plot_with_refined(text_with_links, client)


def get_movie_details_by_name_llm(movie_name: str) -> str:
    """Return a detailed card for the provided movie title.

    Args:
        movie_name: Movie name provided by the user.

    Returns:
        A formatted Armenian block with title, meta fields, refined plot and links.
    """
    prompt = f"""
ีีฃีฟีกีฟีฅึีจ ีฃึีธึีด ีง ึีซีฌีดีซ ีกีถีธึีถีจี ยซ{movie_name}ยป

ีีพีตีกีฌีจ ีฟีธึึ ีฐีฅีฟึีตีกีฌ ีฏีกีผีธึึีพีกีฎึีธีพี

๐ฅ ีีฅึีถีกีฃีซึ` ... (ีีกึีซ)
๐ญ ิบีกีถึีจี ...
๐ฌ ีีฅีชีซีฝีธึี ...
๐ญ ิดีฅึีกีฝีกีถีถีฅึี ... (ีณีทีฃึีซีฟ 5 ีฐีกีตีฟีถีซ ีคีฅึีกีฝีกีถี ีกีถีธึีถ, ีกีฆีฃีกีถีธึีถ ีฑึีกีนีกึีธีพ)
๐ธ ิฒีตีธึีปีฅี ...
๐ฐ ิตีฏีกีดีธึีฟี ...
๐ ีีตีธึีชีฅี ...
๐ IMDb ีฃีถีกีฐีกีฟีกีฏีกีถี ...
๐ค ีีฅีฟีกึึึีซึ ึีกีฝีฟี ...
๐ข ิฑึีชีฅี ีคีซีฟีฅีฌ ีกีตีฝ ึีซีฌีดีจี ...
โถ๏ธ ีึีฅีตีฌีฅึี [ิดีซีฟีฅีฌ YouTube-ีธึีด](...)
๐๏ธ ิดีซีฟีฅีฌีธึ ีฐีฒีธึีดี [IMDB ีฏีกีด ีกีตีฌ ีพีฝีฟีกีฐีฅีฌีซ ีกีฒีขีตีธึึ](...)
"""
    response = client.chat.completions.create(
        model="gpt-4o", messages=[{"role": "user", "content": prompt}], temperature=0.7
    )
    raw_output = response.choices[0].message.content
    text_with_links = add_default_links_if_missing(raw_output)
    return replace_plot_with_refined(text_with_links, client)


def get_movies_by_genre_llm(genre: str) -> str:
    """Return three movie suggestions constrained to a specific genre.

    Args:
        genre: Armenian genre name.

    Returns:
        A formatted Armenian block with three movies; plot is refined.
    """
    prompt = f"""
ีีฃีฟีกีฟีฅึีจ ีจีถีฟึีฅีฌ ีง ีฐีฅีฟึีตีกีฌ ีชีกีถึีจี {genre}ึ

ิฑีผีกีปีกึีฏีซึ 3 ึีซีฌีด ีกีตีค ีชีกีถึีธีพี ีฟีกึีขีฅึ ีฟีกึีซีถีฅึีซึึ
ีีพีตีกีฌีถีฅึีจ ีฟีธึึ ีตีธึึีกึีกีถีนีตีธึึ ึีซีฌีดีซ ีฐีกีดีกึ ีฐีฅีฟึีตีกีฌ ีฑึีกีนีกึีธีพี

๐ฅ ีีฅึีถีกีฃีซึ` ... (ีีกึีซ)
๐ญ ิบีกีถึีจี {genre}
๐ฌ ีีฅีชีซีฝีธึี ...
๐ญ ิดีฅึีกีฝีกีถีถีฅึี ... (ีณีทีฃึีซีฟ 5 ีฐีกีตีฟีถีซ ีคีฅึีกีฝีกีถี ีกีถีธึีถ, ีกีฆีฃีกีถีธึีถ ีฑึีกีนีกึีธีพ)
๐ ีีตีธึีชีฅี ...
๐ IMDb ีฃีถีกีฐีกีฟีกีฏีกีถี ...
โถ๏ธ ีึีฅีตีฌีฅึี [ิดีซีฟีฅีฌ YouTube-ีธึีด](...)
๐๏ธ ิดีซีฟีฅีฌีธึ ีฐีฒีธึีดี [IMDB ีฏีกีด ีกีตีฌ ีพีฝีฟีกีฐีฅีฌีซ ีกีฒีขีตีธึึ](...)

ีีซี ีฃึีซึ ีขีกึีกีฟึีธึีฉีตีธึีถีถีฅึ, ีฟีธึึ ึีซีฌีดีฅึีจ ีฐีกีปีธึีคีกีขีกึึ
"""
    response = client.chat.completions.create(
        model="gpt-4o", messages=[{"role": "user", "content": prompt}], temperature=0.85
    )
    raw_output = response.choices[0].message.content
    text_with_links = add_default_links_if_missing(raw_output)
    return replace_plot_with_refined(text_with_links, client)


def get_top_10_movies_llm() -> str:
    """Return a curated list of ten notable modern films across genres/countries.

    Returns:
        A formatted Armenian block with 10 films and refined plot sections.
    """
    prompt = """
ิฑีผีกีปีกึีฏีซึ 10 ึีซีฌีด, ีธึีธีถึ ีฐีกีดีกึีพีธึีด ีฅีถ ีชีกีดีกีถีกีฏีกีฏีซึ ีฏีซีถีธีตีซ ีฌีกีพีกีฃีธึีตีถีถีฅึีซึึ
ีีทีซ ีฟีกึีขีฅึ ีชีกีถึีฅึีซึ, ีฟีกึีขีฅึ ีฅึีฏึีถีฅึีซึึ

ีีธึึีกึีกีถีนีตีธึึ ึีซีฌีดีซ ีฐีกีดีกึ ีฟีธึึ ีฐีฅีฟึีตีกีฌ ีฑึีกีนีกึีธีพี

๐ฅ ีีฅึีถีกีฃีซึ` ... (ีีกึีซ)
๐ญ ิบีกีถึีจี ...
๐ฌ ีีฅีชีซีฝีธึี ...
๐ญ ิดีฅึีกีฝีกีถีถีฅึี ... (ีณีทีฃึีซีฟ 5 ีฐีกีตีฟีถีซ ีคีฅึีกีฝีกีถี ีกีถีธึีถ, ีกีฆีฃีกีถีธึีถ ีฑึีกีนีกึีธีพ)
๐ ีีตีธึีชีฅี ...
๐ IMDb ีฃีถีกีฐีกีฟีกีฏีกีถี ...
โถ๏ธ ีึีฅีตีฌีฅึี [ิดีซีฟีฅีฌ YouTube-ีธึีด](...)
๐๏ธ ิดีซีฟีฅีฌีธึ ีฐีฒีธึีดี [IMDB ีฏีกีด ีกีตีฌ ีพีฝีฟีกีฐีฅีฌีซ ีกีฒีขีตีธึึ](...)

ีีซี ีฃึีซึ ีขีกึีกีฟึีธึีฉีตีธึีถ ีฏีกีด ีฐีกีพีฅีฌีตีกีฌ ีดีฅีฏีถีกีขีกีถีธึีฉีตีธึีถึ ีีกึีฆ ึีธึึีกีฏ ึีซีฌีดีฅึีธีพึ
"""
    response = client.chat.completions.create(
        model="gpt-4o", messages=[{"role": "user", "content": prompt}], temperature=0.75
    )
    raw_output = response.choices[0].message.content
    text_with_links = add_default_links_if_missing(raw_output)
    return replace_plot_with_refined(text_with_links, client)
