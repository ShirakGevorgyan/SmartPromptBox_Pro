"""Series suggestions via OpenAI with Armenian prompts.

Functions here mirror the movie helpers but target TV series:
- get_random_series_llm: propose a random series across random genres/years.
- suggest_series_by_description_llm: one series by free-text description.
- get_series_details_by_name_llm: detailed info for a given series title.
- get_series_by_genre_llm: three series for a genre.
- get_top_10_series_llm: a top-10 list of modern series.

All functions send Armenian prompts; plots are refined via `replace_plot_with_refined`.
"""

from openai import OpenAI
import os
from dotenv import load_dotenv
import random
from app.llm.text_utils import replace_plot_with_refined

load_dotenv()
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))


def get_random_series_llm() -> str:
    """Return a single random series suggestion (genres/years chosen randomly).

    Returns:
        A formatted Armenian block with title, genre, director, cast, plot, rating, links.
    """
    genres = [
        "ีคึีกีดีก",
        "ีฏีกีฟีกีฏีฅึีฃีธึีฉีตีธึีถ",
        "ีฃีซีฟีกึีกีถีฟีกีฝีฟีซีฏีก",
        "ีดีซีฝีฟีซีฏีก",
        "ีฐีธีฃีฅีขีกีถีกีฏีกีถ ีฉึีซีฌีฌีฅึ",
        "ีคีฅีฟีฅีฏีฟีซีพ",
        "ีฝีกึีฝีกึ",
        "ึีกีถีฟีกีฆีซีก",
        "ีผีธีดีกีถีฟีซีฏ",
        "ีบีกีฟีดีกีฏีกีถ",
        "ีฏึีซีดีซีถีกีฌ",
        "ีดีธึีฌีฟีฝีฅึีซีกีฌ",
        "ึีกีถีฟีกีฝีฟีซีฏีก",
        "ีดีกึีคีฏีกีตีซีถ ีฐีกึีกีขีฅึีธึีฉีตีธึีถีถีฅึ",
        "ีฏีฅีถีฝีกีฃึีกีฏีกีถ",
        "ีจีถีฟีกีถีฅีฏีกีถ",
        "ีคีซีฝีฉีธีบีซีก",
        "ีฝีธึีซีกีฌีกีฏีกีถ ีคึีกีดีก",
        "ีฝีบีธึีฟีกีตีซีถ",
        "ึีกีฒีกึีกีฏีกีถ ีฉึีซีฌีฌีฅึ",
    ]

    selected_genres = random.sample(genres, k=random.choice([2, 3]))
    genres_str = ", ".join(selected_genres)

    random_start_year = random.choice(range(1980, 2020))
    random_end_year = random.choice(range(random_start_year + 1, 2024))

    prompt_variants = [
        "ีกีผีกีปีกึีฏีซึ ีฝีฅึีซีกีฌ, ีธึีจ ีทีกีฟีฅึีซีถ ีคีธึึ ีฏีฃีก",
        "ีถีทีซึ ีฃีฅึีกีฆีกีถึ ีฝีฅึีซีกีฌี ีจีฝีฟ ีชีกีถึีซ ึ ีฟีกึีฅีฉีพีซ",
        "ีบีกีฟีกีฐีกีฏีกีถ, ีขีกีตึ ีฐีกีถึีกีฐีกีตีฟ ีฝีฅึีซีกีฌีซ ีกีผีกีปีกึีฏ",
        "ีฝีฅึีซีกีฌ, ีธึีถ ีกึีชีฅ ีคีซีฟีฅีฌ ีจีฝีฟ ีชีกีถึีฅึีซ",
    ]
    prompt_intro = random.choice(prompt_variants)

    prompt = f"""
ิฝีถีคึีธึีด ีฅีด {prompt_intro}ึ

ิบีกีถึีฅึีจี {genres_str}
ีีกึีฅีฉีพีฅึีซ ีดีซีปีกีฏีกีตึี {random_start_year} - {random_end_year}

ีีพีตีกีฌีจ ีฟีธึึ ีฐีฅีฟึีตีกีฌ ีฑึีกีนีกึีธีพี

๐ฅ ีีฅึีถีกีฃีซึี ... (ีีกึีซ)
๐ญ ิบีกีถึีจี ...
๐ฌ ีีฅีชีซีฝีธึี ...
๐ญ ิดีฅึีกีฝีกีถีถีฅึี ... (ีณีทีฃึีซีฟ 5 ีฐีกีตีฟีถีซ ีคีฅึีกีฝีกีถี ีกีถีธึีถ, ีกีฆีฃีกีถีธึีถ ีฑึีกีนีกึีธีพ)
๐ ีีตีธึีชีฅี ...
๐ IMDb ีฃีถีกีฐีกีฟีกีฏีกีถี ...
โถ๏ธ ีึีฅีตีฌีฅึี [ิดีซีฟีฅีฌ YouTube-ีธึีด](...)
๐๏ธ ิดีซีฟีฅีฌีธึ ีฐีฒีธึีดี [IMDB ีฏีกีด ีกีตีฌ ีพีฝีฟีกีฐีฅีฌีซ ีกีฒีขีตีธึึ](...)

ีีซ ีฃึีซึ ีขีกึีกีฟึีธึีฉีตีธึีถึ ีีซีกีตีถ ีฝีฅึีซีกีฌีซ ีฟีพีตีกีฌีถีฅึีจึ ีีซี ีกีพีฅีฌีกึึีธึ emojis (ีคึีกีถึ ีกึีคีฅีถ ีฏีกีถ)ึ
"""
    response = client.chat.completions.create(
        model="gpt-4o",
        messages=[{"role": "user", "content": prompt}],
        temperature=1.2,
        top_p=1.0,
        frequency_penalty=0.5,
        presence_penalty=1.0,
    )
    raw_output = response.choices[0].message.content
    return replace_plot_with_refined(raw_output, client)


def suggest_series_by_description_llm(description: str) -> str:
    """Suggest a series that fits the provided free-text description.

    Args:
        description: Armenian description of desired theme/mood.

    Returns:
        A formatted Armenian block with standard fields and refined plot.
    """
    prompt = f"""
ีีฃีฟีกีฟีฅึีจ ึีกีถีฏีกีถีธึีด ีง ีฝีฅึีซีกีฌ ีกีผีกีปีกึีฏี ีจีฝีฟ ีถีฏีกึีกีฃึีธึีฉีตีกีถโค
ยซ{description}ยป

ิฑีผีกีปีกึีฏีซึ ีดีซีกีตีถ ีดีฅีฏ ีฝีฅึีซีกีฌี ีฐีฅีฟึีตีกีฌ ีฑึีกีนีกึีธีพี

๐ฅ ีีฅึีถีกีฃีซึี ... (ีีกึีซ)
๐ญ ิบีกีถึีจี ...
๐ฌ ีีฅีชีซีฝีธึี ...
๐ญ ิดีฅึีกีฝีกีถีถีฅึี ... (ีณีทีฃึีซีฟ 5 ีฐีกีตีฟีถีซ ีคีฅึีกีฝีกีถี ีกีถีธึีถ, ีกีฆีฃีกีถีธึีถ ีฑึีกีนีกึีธีพ)
๐ ีีตีธึีชีฅี ...
๐ IMDb ีฃีถีกีฐีกีฟีกีฏีกีถี ...
โถ๏ธ ีึีฅีตีฌีฅึี [ิดีซีฟีฅีฌ YouTube-ีธึีด](...)
๐๏ธ ิดีซีฟีฅีฌีธึ ีฐีฒีธึีดี [IMDB ีฏีกีด ีกีตีฌ ีพีฝีฟีกีฐีฅีฌีซ ีกีฒีขีตีธึึ](...)

ีีซ ีฃึีซึ ีขีกึีกีฟึีธึีฉีตีธึีถึ ีีซีกีตีถ ีฝีฅึีซีกีฌีซ ีฟีพีตีกีฌีถีฅึีจึ ีีซี ีกีพีฅีฌีกึึีธึ emojis (ีคึีกีถึ ีกึีคีฅีถ ีฏีกีถ)ึ
"""
    response = client.chat.completions.create(
        model="gpt-4o", messages=[{"role": "user", "content": prompt}], temperature=0.7
    )
    raw_output = response.choices[0].message.content
    return replace_plot_with_refined(raw_output, client)


def get_series_details_by_name_llm(series_name: str) -> str:
    """Return a detailed card for the provided series title.

    Args:
        series_name: Series name provided by the user.

    Returns:
        A formatted Armenian block with title, meta fields, refined plot and links.
    """
    prompt = f"""
ีีฃีฟีกีฟีฅึีจ ีฃึีธึีด ีง ีฝีฅึีซีกีฌีซ ีกีถีธึีถีจี ยซ{series_name}ยป

ิฝีถีคึีธึีด ีฅีด ีฟีธึึ ีกีตีฝ ีฝีฅึีซีกีฌีซ ีดีกีฝีซีถ ีกีดีขีธีฒีปีกีฏีกีถ ีซีถึีธี ีฐีฅีฟึีตีกีฌ ีฏีกีผีธึึีพีกีฎึีธีพี

๐ฅ ีีฅึีถีกีฃีซึี ... (ีีกึีซ)
๐ญ ิบีกีถึีจี ...
๐ฌ ีีฅีชีซีฝีธึี ...
๐ญ ิดีฅึีกีฝีกีถีถีฅึี ... (ีณีทีฃึีซีฟ 5 ีฐีกีตีฟีถีซ ีคีฅึีกีฝีกีถี ีกีถีธึีถ, ีกีฆีฃีกีถีธึีถ ีฑึีกีนีกึีธีพ)
๐ธ ิฒีตีธึีปีฅี ...
๐ฐ ิตีฏีกีดีธึีฟี ...
๐ ีีตีธึีชีฅี ...
๐ IMDb ีฃีถีกีฐีกีฟีกีฏีกีถี ...
๐ค ีีฅีฟีกึึึีซึ ึีกีฝีฟี ...
๐ข ิฑึีชีฅี ีคีซีฟีฅีฌ ีกีตีฝ ีฝีฅึีซีกีฌีจี ...
โถ๏ธ ีึีฅีตีฌีฅึี [ิดีซีฟีฅีฌ YouTube-ีธึีด](...)
๐๏ธ ิดีซีฟีฅีฌีธึ ีฐีฒีธึีดี [IMDB ีฏีกีด ีกีตีฌ ีพีฝีฟีกีฐีฅีฌีซ ีกีฒีขีตีธึึ](...)

ีีซ ีฃึีซึ ีขีกึีกีฟึีธึีฉีตีธึีถ, ีดีซ ีกีพีฅีฌีกึึีธึ emojis (ีกึีคีฅีถ ีฏีกีถ)ึ
"""

    try:
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.6,
        )
        raw_output = response.choices[0].message.content
        return replace_plot_with_refined(raw_output, client)

    except Exception:
        return f"ีีถีกึีกีพีธึ ีนีง ีฝีฟีกีถีกีฌ ีฟีพีตีกีฌีถีฅึ ยซ{series_name}ยป ีฝีฅึีซีกีฌีซ ีดีกีฝีซีถ ีกีตีฝ ีบีกีฐีซีถึ"


def get_series_by_genre_llm(genre: str) -> str:
    """Return three series suggestions constrained to a specific genre.

    Args:
        genre: Armenian genre name.

    Returns:
        A formatted Armenian block with three series; plot is refined.
    """
    prompt = f"""
ีีฃีฟีกีฟีฅึีจ ีจีถีฟึีฅีฌ ีง ีฝีฅึีซีกีฌีซ ีชีกีถึีจี {genre}ึ

ิฑีผีกีปีกึีฏีซึ 3 ีฝีฅึีซีกีฌ ีกีตีค ีชีกีถึีธีพี ีฟีกึีขีฅึ ีฟีกึีซีถีฅึีซึึ

ีีธึึีกึีกีถีนีตีธึึ ีฝีฅึีซีกีฌีซ ีฐีกีดีกึ ีฟีธึึ ีฐีฅีฟึีตีกีฌ ีฏีกีผีธึึีพีกีฎึีธีพี

๐ฅ ีีฅึีถีกีฃีซึี ... (ีีกึีซ)
๐ญ ิบีกีถึีจี {genre}
๐ฌ ีีฅีชีซีฝีธึี ...
๐ญ ิดีฅึีกีฝีกีถีถีฅึี ... (ีณีทีฃึีซีฟ 5 ีฐีกีตีฟีถีซ ีคีฅึีกีฝีกีถี ีกีถีธึีถ, ีกีฆีฃีกีถีธึีถ ีฑึีกีนีกึีธีพ)
๐ ีีตีธึีชีฅี ...
๐ IMDb ีฃีถีกีฐีกีฟีกีฏีกีถี ...
โถ๏ธ ีึีฅีตีฌีฅึี [ิดีซีฟีฅีฌ YouTube-ีธึีด](...)
๐๏ธ ิดีซีฟีฅีฌีธึ ีฐีฒีธึีดี [IMDB ีฏีกีด ีกีตีฌ ีพีฝีฟีกีฐีฅีฌีซ ีกีฒีขีตีธึึ](...)

ีีซ ีฃึีซึ ีขีกึีกีฟึีธึีฉีตีธึีถึ ีีซี ีกีพีฅีฌีกึึีธึ emojisึ
"""
    response = client.chat.completions.create(
        model="gpt-4o", messages=[{"role": "user", "content": prompt}], temperature=0.85
    )
    raw_output = response.choices[0].message.content
    return replace_plot_with_refined(raw_output, client)


def get_top_10_series_llm() -> str:
    """Return a curated list of ten notable modern series across genres/countries.

    Returns:
        A formatted Armenian block with 10 series and refined plot sections.
    """
    prompt = """
ีีทีซ 10 ีฝีฅึีซีกีฌ, ีธึีธีถึ ีฐีกีดีกึีพีธึีด ีฅีถ ีชีกีดีกีถีกีฏีกีฏีซึ ีฌีกีพีกีฃีธึีตีถีถีฅึีซึึ

ีีทีซึ ีฟีกึีขีฅึ ีชีกีถึีฅึีซึ, ีฟีกึีขีฅึ ีฅึีฏึีถีฅึีซึึ ีีธึึีกึีกีถีนีตีธึึ ีฝีฅึีซีกีฌีซ ีฐีกีดีกึ ีฟีธึึ ีฐีฅีฟึีตีกีฌ ีฏีกีผีธึึีพีกีฎึีธีพี

๐ฅ ีีฅึีถีกีฃีซึี ... (ีีกึีซ)
๐ญ ิบีกีถึีจี ...
๐ฌ ีีฅีชีซีฝีธึี ...
๐ญ ิดีฅึีกีฝีกีถีถีฅึี ... (ีณีทีฃึีซีฟ 5 ีฐีกีตีฟีถีซ ีคีฅึีกีฝีกีถี ีกีถีธึีถ, ีกีฆีฃีกีถีธึีถ ีฑึีกีนีกึีธีพ)
๐ ีีตีธึีชีฅี ...
๐ IMDb ีฃีถีกีฐีกีฟีกีฏีกีถี ...
โถ๏ธ ีึีฅีตีฌีฅึี [ิดีซีฟีฅีฌ YouTube-ีธึีด](...)
๐๏ธ ิดีซีฟีฅีฌีธึ ีฐีฒีธึีดี [IMDB ีฏีกีด ีกีตีฌ ีพีฝีฟีกีฐีฅีฌีซ ีกีฒีขีตีธึึ](...)

ีีซี ีฃึีซึ ีขีกึีกีฟึีธึีฉีตีธึีถึ ีีซี ีกีพีฅีฌีกึึีธึ emojis (ีกึีคีฅีถีฏีก)ึ
"""
    response = client.chat.completions.create(
        model="gpt-4o", messages=[{"role": "user", "content": prompt}], temperature=0.75
    )
    raw_output = response.choices[0].message.content
    return replace_plot_with_refined(raw_output, client)
