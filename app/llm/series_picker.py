from openai import OpenAI
import os
from dotenv import load_dotenv
import random
from app.llm.text_utils import replace_plot_with_refined

load_dotenv()
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# ๐ฒ 1. ีีกีฟีกีฐีกีฏีกีถ ีฝีฅึีซีกีฌ
def get_random_series_llm() -> str:
    genres = [
        "ีคึีกีดีก", "ีฏีกีฟีกีฏีฅึีฃีธึีฉีตีธึีถ", "ีฃีซีฟีกึีกีถีฟีกีฝีฟีซีฏีก", "ีดีซีฝีฟีซีฏีก", "ีฐีธีฃีฅีขีกีถีกีฏีกีถ ีฉึีซีฌีฌีฅึ",
        "ีคีฅีฟีฅีฏีฟีซีพ", "ีฝีกึีฝีกึ", "ึีกีถีฟีกีฆีซีก", "ีผีธีดีกีถีฟีซีฏ", "ีบีกีฟีดีกีฏีกีถ", "ีฏึีซีดีซีถีกีฌ",
        "ีดีธึีฌีฟีฝีฅึีซีกีฌ", "ึีกีถีฟีกีฝีฟีซีฏีก", "ีดีกึีคีฏีกีตีซีถ ีฐีกึีกีขีฅึีธึีฉีตีธึีถีถีฅึ", "ีฏีฅีถีฝีกีฃึีกีฏีกีถ",
        "ีจีถีฟีกีถีฅีฏีกีถ", "ีคีซีฝีฉีธีบีซีก", "ีฝีธึีซีกีฌีกีฏีกีถ ีคึีกีดีก", "ีฝีบีธึีฟีกีตีซีถ", "ึีกีฒีกึีกีฏีกีถ ีฉึีซีฌีฌีฅึ"
    ]

    selected_genres = random.sample(genres, k=random.choice([2, 3]))
    genres_str = ", ".join(selected_genres)

    random_start_year = random.choice(range(1980, 2020))
    random_end_year = random.choice(range(random_start_year + 1, 2024))

    prompt_variants = [
        "ีกีผีกีปีกึีฏีซึ ีฝีฅึีซีกีฌ, ีธึีจ ีทีกีฟีฅึีซีถ ีคีธึึ ีฏีฃีก",
        "ีถีทีซึ ีฃีฅึีกีฆีกีถึ ีฝีฅึีซีกีฌี ีจีฝีฟ ีชีกีถึีซ ึ ีฟีกึีฅีฉีพีซ",
        "ีบีกีฟีกีฐีกีฏีกีถ, ีขีกีตึ ีฐีกีถึีกีฐีกีตีฟ ีฝีฅึีซีกีฌีซ ีกีผีกีปีกึีฏ",
        "ีฝีฅึีซีกีฌ, ีธึีถ ีกึีชีฅ ีคีซีฟีฅีฌ ีจีฝีฟ ีชีกีถึีฅึีซ"
    ]
    prompt_intro = random.choice(prompt_variants)

    prompt = f"""
ิฝีถีคึีธึีด ีฅีด {prompt_intro}ึ

ิบีกีถึีฅึีจี {genres_str}  
ีีกึีฅีฉีพีฅึีซ ีดีซีปีกีฏีกีตึี {random_start_year} - {random_end_year}

ีีพีตีกีฌีจ ีฟีธึึ ีฐีฅีฟึีตีกีฌ ีฑึีกีนีกึีธีพี

๐ฅ ีีฅึีถีกีฃีซึี ... (ีีกึีซ)  
๐ญ ิบีกีถึีจี ...  
๐ฌ ีีฅีชีซีฝีธึี ...  
๐ญ ิดีฅึีกีฝีกีถีถีฅึี ... (ีณีทีฃึีซีฟ 5 ีฐีกีตีฟีถีซ ีคีฅึีกีฝีกีถี ีกีถีธึีถ, ีกีฆีฃีกีถีธึีถ ีฑึีกีนีกึีธีพ)  
๐ ีีตีธึีชีฅี ...  
๐ IMDb ีฃีถีกีฐีกีฟีกีฏีกีถี ...  
โถ๏ธ ีึีฅีตีฌีฅึี [ิดีซีฟีฅีฌ YouTube-ีธึีด](...)  
๐๏ธ ิดีซีฟีฅีฌีธึ ีฐีฒีธึีดี [IMDB ีฏีกีด ีกีตีฌ ีพีฝีฟีกีฐีฅีฌีซ ีกีฒีขีตีธึึ](...)

ีีซ ีฃึีซึ ีขีกึีกีฟึีธึีฉีตีธึีถึ ีีซีกีตีถ ีฝีฅึีซีกีฌีซ ีฟีพีตีกีฌีถีฅึีจึ ีีซี ีกีพีฅีฌีกึึีธึ emojis (ีคึีกีถึ ีกึีคีฅีถ ีฏีกีถ)ึ
"""
    response = client.chat.completions.create(
        model="gpt-4o",
        messages=[{"role": "user", "content": prompt}],
        temperature=1.2,
        top_p=1.0,
        frequency_penalty=0.5,
        presence_penalty=1.0
    )
    raw_output = response.choices[0].message.content
    return replace_plot_with_refined(raw_output, client)


# ๐ 2. ิธีฝีฟ ีถีฏีกึีกีฃึีธึีฉีตีกีถ
def suggest_series_by_description_llm(description: str) -> str:
    prompt = f"""
ีีฃีฟีกีฟีฅึีจ ึีกีถีฏีกีถีธึีด ีง ีฝีฅึีซีกีฌ ีกีผีกีปีกึีฏี ีจีฝีฟ ีถีฏีกึีกีฃึีธึีฉีตีกีถโค
ยซ{description}ยป

ิฑีผีกีปีกึีฏีซึ ีดีซีกีตีถ ีดีฅีฏ ีฝีฅึีซีกีฌี ีฐีฅีฟึีตีกีฌ ีฑึีกีนีกึีธีพี

๐ฅ ีีฅึีถีกีฃีซึี ... (ีีกึีซ)  
๐ญ ิบีกีถึีจี ...  
๐ฌ ีีฅีชีซีฝีธึี ...  
๐ญ ิดีฅึีกีฝีกีถีถีฅึี ... (ีณีทีฃึีซีฟ 5 ีฐีกีตีฟีถีซ ีคีฅึีกีฝีกีถี ีกีถีธึีถ, ีกีฆีฃีกีถีธึีถ ีฑึีกีนีกึีธีพ)  
๐ ีีตีธึีชีฅี ...  
๐ IMDb ีฃีถีกีฐีกีฟีกีฏีกีถี ...  
โถ๏ธ ีึีฅีตีฌีฅึี [ิดีซีฟีฅีฌ YouTube-ีธึีด](...)  
๐๏ธ ิดีซีฟีฅีฌีธึ ีฐีฒีธึีดี [IMDB ีฏีกีด ีกีตีฌ ีพีฝีฟีกีฐีฅีฌีซ ีกีฒีขีตีธึึ](...)

ีีซ ีฃึีซึ ีขีกึีกีฟึีธึีฉีตีธึีถึ ีีซีกีตีถ ีฝีฅึีซีกีฌีซ ีฟีพีตีกีฌีถีฅึีจึ ีีซี ีกีพีฅีฌีกึึีธึ emojis (ีคึีกีถึ ีกึีคีฅีถ ีฏีกีถ)ึ
"""
    response = client.chat.completions.create(
        model="gpt-4o",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.7
    )
    raw_output = response.choices[0].message.content
    return replace_plot_with_refined(raw_output, client)


# ๐ 3. ีีกีถึีกีดีกีฝีถ ีซีถึีธ ีจีฝีฟ ีกีถีพีกีถีดีกีถ
def get_series_details_by_name_llm(series_name: str) -> str:
    prompt = f"""
ีีฃีฟีกีฟีฅึีจ ีฃึีธึีด ีง ีฝีฅึีซีกีฌีซ ีกีถีธึีถีจี ยซ{series_name}ยป

ิฝีถีคึีธึีด ีฅีด ีฟีธึึ ีกีตีฝ ีฝีฅึีซีกีฌีซ ีดีกีฝีซีถ ีกีดีขีธีฒีปีกีฏีกีถ ีซีถึีธี ีฐีฅีฟึีตีกีฌ ีฏีกีผีธึึีพีกีฎึีธีพี

๐ฅ ีีฅึีถีกีฃีซึี ... (ีีกึีซ)  
๐ญ ิบีกีถึีจี ...  
๐ฌ ีีฅีชีซีฝีธึี ...  
๐ญ ิดีฅึีกีฝีกีถีถีฅึี ... (ีณีทีฃึีซีฟ 5 ีฐีกีตีฟีถีซ ีคีฅึีกีฝีกีถี ีกีถีธึีถ, ีกีฆีฃีกีถีธึีถ ีฑึีกีนีกึีธีพ)  
๐ธ ิฒีตีธึีปีฅี ...  
๐ฐ ิตีฏีกีดีธึีฟี ...  
๐ ีีตีธึีชีฅี ...  
๐ IMDb ีฃีถีกีฐีกีฟีกีฏีกีถี ...  
๐ค ีีฅีฟีกึึึีซึ ึีกีฝีฟี ...  
๐ข ิฑึีชีฅี ีคีซีฟีฅีฌ ีกีตีฝ ีฝีฅึีซีกีฌีจี ...  
โถ๏ธ ีึีฅีตีฌีฅึี [ิดีซีฟีฅีฌ YouTube-ีธึีด](...)  
๐๏ธ ิดีซีฟีฅีฌีธึ ีฐีฒีธึีดี [IMDB ีฏีกีด ีกีตีฌ ีพีฝีฟีกีฐีฅีฌีซ ีกีฒีขีตีธึึ](...)

ีีซ ีฃึีซึ ีขีกึีกีฟึีธึีฉีตีธึีถ, ีดีซ ีกีพีฅีฌีกึึีธึ emojis (ีกึีคีฅีถ ีฏีกีถ)ึ
"""
    response = client.chat.completions.create(
        model="gpt-4o",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.6
    )
    raw_output = response.choices[0].message.content
    return replace_plot_with_refined(raw_output, client)
