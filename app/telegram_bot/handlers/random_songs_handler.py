from aiogram import Router, F
from aiogram.types import Message, FSInputFile
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from app.llm.mood_inferencer import generate_songs_random
from app.telegram_bot.menu import random_song_menu, main_menu
from app.utils.youtube_downloader import download_audio
from app.llm.clean_title import clean_song_title_llm
import os

router = Router()

@router.message(F.text == "üîÄ ’ä’°’ø’°’∞’°’Ø’°’∂ ’•÷Ä’£")
async def random_song_handler(message: Message, state: FSMContext):
    await message.answer("üé≤ ’ç’∫’°’Ω’´÷Ä, ’£’ø’∂’∏÷Ç’¥ ’•’¥ ’∫’°’ø’°’∞’°’Ø’°’∂ ’•÷Ä’£‚Ä¶")

    songs = generate_songs_random()
    if not songs:
        await message.answer("‚ùå ’â’∞’°’ª’∏’≤’æ’•÷Å ’£’ø’∂’•’¨ ’•÷Ä’£÷â ’ì’∏÷Ä’±’´÷Ä ’∂’∏÷Ä’´÷Å üò¢")
        return

    await send_song_buttons(songs, message, state)


# ‚úÖ ’ë’∏÷Ç÷Å’°’§÷Ä’∏÷Ç’¥ ’ß ’•÷Ä’£’®’ù download ’Ø’∏’≥’°’Ø’∏’æ
async def send_song_buttons(songs: list[dict], message: Message, state: FSMContext):
    await state.update_data(songs_for_download=songs)  # store full list in FSM

    for idx, song in enumerate(songs):
        title = song["title"]
        artist = song["artist"]
        description = song["description"]
        youtube_url = song["youtube"]

        text = (
            f"<b>{title}</b> ‚Äî <i>{artist}</i>\n"
            f"üìé {description}"
        )
        callback_data = f"download_{idx}"

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîó YouTube", url=youtube_url)],
            [InlineKeyboardButton(text="‚¨áÔ∏è ’Ü’•÷Ä’¢’•’º’∂’•’¨", callback_data=callback_data)]
        ])
        await message.answer(text, parse_mode="HTML", reply_markup=keyboard)


# ‚úÖ Callback ÷Ü’∏÷Ç’∂’Ø÷Å’´’°’ù ’∂’•÷Ä’¢’•’º’∂’¥’°’∂ ’∞’°’¥’°÷Ä
@router.callback_query(F.data.startswith("download_"))
async def handle_download_callback(callback: CallbackQuery, state: FSMContext):
    await callback.answer("‚¨áÔ∏è ’Ü’•÷Ä’¢’•’º’∂’∏÷Ç’¥ ’•’¥...")

    try:
        index = int(callback.data.split("_")[1])
        data = await state.get_data()
        songs = data.get("songs_for_download", [])

        if index < 0 or index >= len(songs):
            await callback.message.answer("‚ùå ’ç’≠’°’¨ ’´’∂’§’•÷Ñ’Ω÷â")
            return

        song = songs[index]
        youtube_url = song["youtube"]
        title = song["title"]

        clean_name = clean_song_title_llm(title)
        file_path = download_audio(youtube_url, filename=clean_name)
        audio = FSInputFile(file_path)

        await callback.message.answer_audio(audio, caption=f"üéµ {clean_name}")
        os.remove(file_path)
        await callback.message.delete()

        # ‚úÖ ’é’•÷Ä’ª’∏÷Ç’¥ ’°’æ’•’¨’°÷Å’∂’•’∂÷Ñ reply ’¥’•’∂’µ’∏÷Ç’∂
        await callback.message.answer("‘∏’∂’ø÷Ä’´÷Ä’ù", reply_markup=random_song_menu)

    except Exception as e:
        print("‚ùå Download error:", e)
        await callback.message.answer("’â’∞’°’ª’∏’≤’æ’•÷Å ’∂’•÷Ä’¢’•’º’∂’•’¨ ’•÷Ä’£’®÷â")


# ‚úÖ ’Ü’∏÷Ä ’∫’°’ø’°’∞’°’Ø’°’∂ ’•÷Ä’£
@router.message(F.text == "üîÅ ’Ü’∏÷Ä ’∫’°’ø’°’∞’°’Ø’°’∂ ’•÷Ä’£")
async def new_random_song_handler(message: Message, state: FSMContext):
    await random_song_handler(message, state)


# ‚úÖ ’é’•÷Ä’°’§’°÷Ä’± ’£’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç
@router.message(F.text == "üîù ’é’•÷Ä’°’§’°’º’∂’°’¨ ’£’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç")
async def back_to_main_menu(message: Message):
    await message.answer("üéº ’é’•÷Ä’°’§’°÷Ä’± ’£’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç÷â", reply_markup=main_menu)
