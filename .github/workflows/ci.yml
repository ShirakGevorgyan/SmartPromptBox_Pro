name: CI (Core)
on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'README.md'
      - 'docs/**'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - 'README.md'
      - 'docs/**'
  workflow_dispatch: {}

permissions:
  contents: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Lint (ruff)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: ${{ runner.os }}-pip-
      - name: Install deps for lint
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
      - name: Ruff checks
        run: ruff check . --line-length 140 --ignore E501


  types:
    name: Types (mypy)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: ${{ runner.os }}-pip-
      - name: Install deps for types
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
      - name: Run mypy
        run: mypy --config-file mypy.ini --explicit-package-bases app
      - name: Init DB (sqlite)
        run: python -m app.scripts.init_db

  unit_tests:
    name: Unit tests + Coverage
    needs: [lint, types]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: ${{ runner.os }}-pip-
      - name: Install test deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
      - name: Run unit tests (with coverage)
        env:
          PYTHONPATH: ${{ github.workspace }}
          OPENAI_API_KEY: "test-key"
          TELEGRAM_BOT_TOKEN: "test-token"
        run: |
          pytest -q tests/unit --maxfail=1 --disable-warnings \
            --cov=app --cov-report=xml --cov-report=html
      - name: Upload coverage HTML
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html
          path: htmlcov
          if-no-files-found: warn

  security:
    name: Security (pip-audit)
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: ${{ runner.os }}-pip-
      - name: Run pip-audit
        run: |
          python -m pip install --upgrade pip
          pip install pip-audit
          if [ -f requirements.txt ] && [ -f requirements-dev.txt ]; then \
            pip-audit -r requirements.txt -r requirements-dev.txt -f json -o pip-audit.json || true; \
          elif [ -f requirements.txt ]; then \
            pip-audit -r requirements.txt -f json -o pip-audit.json || true; \
          else \
            pip-audit -f json -o pip-audit.json || true; \
          fi
      - name: Upload audit report
        uses: actions/upload-artifact@v4
        with:
          name: pip-audit-report
          path: pip-audit.json
          if-no-files-found: warn

  docker_build:
    name: Docker Build (dev & prod)
    runs-on: ubuntu-latest
    needs: [lint, types]
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
      - name: Build dev image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: devops/docker/app/Dockerfile.dev
          push: false
          load: true
          tags: smartpromptbox_pro:dev
      - name: Build prod image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: devops/docker/app/Dockerfile
          push: false
          load: true
          tags: smartpromptbox_pro:prod

  compose_smoke:
    name: Compose Smoke (config + import check)
    runs-on: ubuntu-latest
    needs: [docker_build]
    steps:
      - uses: actions/checkout@v4
      - name: Create dummy .env for compose
        run: |
          cat > .env <<'EOF'
          OPENAI_API_KEY=test-key
          TELEGRAM_BOT_TOKEN=test-token
          EOF
      - name: Validate compose (dev)
        run: docker compose -f devops/compose/docker-compose.dev.yml config --no-interpolate
      - name: Validate compose (prod)
        run: docker compose -f devops/compose/docker-compose.prod.yml config --no-interpolate
      - name: Import check via compose run (dev)
        run: docker compose -f devops/compose/docker-compose.dev.yml run --rm smartbox-app python -c "import app; print('ok')"
      - name: Cleanup
        if: always()
        run: docker compose -f devops/compose/docker-compose.dev.yml down --remove-orphans || true

  ansible_syntax:
    name: Ansible Syntax Check
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Ansible (minimal)
        run: pipx install ansible-core
      - name: 'Sanity: list ansible tree'
        working-directory: devops/ansible
        run: |
          pwd
          ls -la
          ls -la inventory
          ls -la playbooks
          ls -la roles
      - name: Syntax check
        working-directory: devops/ansible
        env:
          ANSIBLE_ROLES_PATH: roles
        run: ansible-playbook -i inventory/hosts.ini --syntax-check playbooks/deploy.yml

      - name: üì§ CI Notify (Success)
        if: success()
        env:
          TG_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN_TEST_NOTIFIER }}
          TG_CHAT:  ${{ secrets.TELEGRAM_CHAT_ID }}
          RUN_URL:  https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          BRANCH:   ${{ github.ref_name }}
        run: |
          if [ -z "$TG_TOKEN" ] || [ -z "$TG_CHAT" ]; then echo "No TG secrets; skip"; exit 0; fi
          curl -s -X POST "https://api.telegram.org/bot$TG_TOKEN/sendMessage" \
            -d chat_id="$TG_CHAT" \
            -d parse_mode="HTML" \
            -d text="üü¢ CI (<b>${BRANCH}</b>) ’∞’°’ª’∏’≤ ’°’æ’°÷Ä’ø’æ’•÷Å ‚úÖ" \
            -d reply_markup='{"inline_keyboard":[[{"text":"üìÑ View CI logs","url":"'"$RUN_URL"'"}]]}'

      - name: ‚ùå CI Notify (Failure)
        if: failure()
        env:
          TG_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN_TEST_NOTIFIER }}
          TG_CHAT:  ${{ secrets.TELEGRAM_BOT_TOKEN_TEST_NOTIFIER }}
          RUN_URL:  https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          BRANCH:   ${{ github.ref_name }}
        run: |
          if [ -z "$TG_TOKEN" ] || [ -z "$TG_CHAT" ]; then echo "No TG secrets; skip"; exit 0; fi
          curl -s -X POST "https://api.telegram.org/bot$TG_TOKEN/sendMessage" \
            -d chat_id="$TG_CHAT" \
            -d parse_mode="HTML" \
            -d text="üö® CI (<b>${BRANCH}</b>) FAILED ‚ùå" \
            -d reply_markup='{"inline_keyboard":[[{"text":"üìÑ View CI logs","url":"'"$RUN_URL"'"}]]}'
