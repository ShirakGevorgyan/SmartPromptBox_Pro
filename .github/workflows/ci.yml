name: CI (Core)

on:
  workflow_dispatch: {}
  push:
    branches: [ main ]
    paths-ignore:
      - 'README.md'
      - 'docs/**'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - 'README.md'
      - 'docs/**'

permissions:
  contents: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Lint (ruff)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install deps for lint
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install ruff

      - name: Ruff checks
        run: |
          ruff check .

  types:
    name: Types (mypy)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: ${{ runner.os }}-pip-
      - name: Install deps for types
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install mypy
      - name: Run mypy
        run: |
          mypy --config-file mypy.ini --explicit-package-bases app




  unit_tests:
    name: Unit tests + Coverage
    needs: [lint, types]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: ${{ runner.os }}-pip-
      - name: Install test deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest pytest-cov
      - name: Run unit tests (with coverage)
        env:
          PYTHONPATH: ${{ github.workspace }}
          OPENAI_API_KEY: "test-key"
          TELEGRAM_BOT_TOKEN: "test-token"
        run: |
          pytest -q tests/unit --maxfail=1 --disable-warnings \
            --cov=app --cov-report=xml --cov-report=html

      - name: Upload coverage HTML
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html
          path: htmlcov
          if-no-files-found: warn

  security:
    name: Security (pip-audit)
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: ${{ runner.os }}-pip-
      - name: Run pip-audit
        run: |
          python -m pip install --upgrade pip
          pip install pip-audit
          if [ -f requirements.txt ]; then \
            pip-audit -r requirements.txt -f json -o pip-audit.json || true; \
          else \
            pip-audit -f json -o pip-audit.json || true; \
          fi
      - name: Upload audit report
        uses: actions/upload-artifact@v4
        with:
          name: pip-audit-report
          path: pip-audit.json
          if-no-files-found: warn

  docker_build:
    name: Docker Build (dev & prod)
    runs-on: ubuntu-latest
    needs: [lint, types]
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      - name: Build dev image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: devops/docker/app/Dockerfile.dev
          push: false
          load: true   
          tags: smartpromptbox_pro:dev

      - name: Build prod image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: devops/docker/app/Dockerfile
          push: false
          load: true         
          tags: smartpromptbox_pro:prod


  compose_smoke:
    name: Compose Smoke (config + import check)
    runs-on: ubuntu-latest
    needs: [docker_build]
    steps:
      - uses: actions/checkout@v4

      - name: Create dummy .env for compose
        run: |
          cat > .env <<'EOF'
          OPENAI_API_KEY=test-key
          TELEGRAM_BOT_TOKEN=test-token
          EOF

      - name: Validate compose (dev)
        run: docker compose -f devops/compose/docker-compose.dev.yml config

      - name: Validate compose (prod)
        run: docker compose -f devops/compose/docker-compose.prod.yml config

      - name: Import check via compose run (dev)
        run: docker compose -f devops/compose/docker-compose.dev.yml run --rm smartbox-app python -c "import app; print('ok')"

      - name: Cleanup
        if: always()
        run: docker compose -f devops/compose/docker-compose.dev.yml down --remove-orphans || true

